def weight(state):
    '''
    calculate the Hamming weight of a state
    '''
    w = sum([int(bit) for bit in state])
    return(w)

def random_state(n):
    '''
    randomly choose a state of length n
    '''
    state = [GF(2)(random.randint(0,1)) for i in range(n)]
    state = tuple(state)
    return(state)

def random_nonzero_state(n):
    '''
    randomly choose a non-zero state of length n
    '''
    zero_state = tuple([GF(2)(0) for i in range(n)])
    state = random_state(n)
    while state == zero_state:
        state = random_state(n)
    return(state)

def random_homogeneous_function(n, degree):
    '''
    for a given degree, randomly choose a homogeneous Boolean function h(x_1,x_2,...,x_{n-1}) of that degree
    '''
    h = boolean_function(0)    # the data type 'boolean_function' is defined in the main function
    combs = itertools.combinations([i for i in range(1, n)], degree)
    for comb in combs:
        if random.randint(0, 1) == 1:
            term = boolean_function(1)
            for ind in comb:
                term = term * x[ind]
            h = h + term
    return(h)

def random_function(n):
    '''
    randomly choose a Boolean function h(x_1,x_2,...,x_{n-1})
    '''
    h = boolean_function(0)
    for d in range(n):
        h = h + random_homogeneous_function(n, d)
    return(h)

def random_sparse_homogeneous_function(n, degree, num_term):
    '''
    for a given degree and a given number, randomly generate a homogeneous Boolean function h(x_1,x_2,...,x_{n-1}) of that degree, whose number of terms equals to the given number
    '''
    h = boolean_function(0)
    terms = set([])
    while len(terms) < min(num_term, binomial(n-1, degree)):
        term = 1
        indexs = random.sample([i for i in range(1,n)], degree)
        for ind in indexs:
            term = term * x[ind]
        terms.add(term)
    for term in terms:
        h = h + term
    return(h)

def cycle_length(n, f, initial_state):
    '''
    calculate the length of the cycle generated by the characteristic function f at a given initial state
    '''
    length = 0
    feedback_function = f + x[n]
    current_state = initial_state
    while True:
        sn = GF(2)(feedback_function.subs(dict(zip(x, current_state)))) # calculate the next bit of the feedback shift register
        current_state = current_state[1:] + (sn,)   # update the internal state of the feedback shift register
        length = length + 1
        if current_state == initial_state:
            break
    return(length)

def update_partial_cycle_structure(n, f, degree, chains):
    '''
    update the partial cycle structure of f from degree d-1 to degree d
    chains is a dictionary-type data that stores the chains in the partial cycle structure of f of degree d-1
    '''
    feedback_function = f + x[n]
    chains_new = {}
    num_suc = 0
    # generate all the states in U_d\V_d, i.e., the states (1,s_1,...,s_{n-2},0) such that
    # the weight of (s_1,...,s_{n-2}) is d
    combs = itertools.combinations([i for i in range(n-2)], degree)
    for comb in combs:
        state = [GF(2)(0) for i in range(n-2)]
        for ind in comb:
            state[ind] = GF(2)(1)
        state = (GF(2)(1),) + tuple(state) + (GF(2)(0),)
        # for each state in U_d\V_d, calculate the chain which takes it as the initial state
        next_state = state
        while not(next_state[0] == 0 and next_state[-1] == 1 and weight(next_state[1:-1]) == degree):
            sn = GF(2)(feedback_function.subs(dict(zip(x, next_state))))
            next_state = next_state[1:] + (sn,)
            num_suc = num_suc + 1
            # if encounter a chain in the partial cycle structure of f of degree d-1, then update the chain accordingly
            if next_state[0] == 1 and next_state[-1] == 0 and weight(next_state[1:-1]) == degree-1:
                next_state = chains[next_state]
        chains_new[state] = next_state # the last state of the chain is stored in the dictionary-type data chains_new
    # if the partial cycle structure of f of degree d contains cycles then chains_new is defined to be -1
    if num_suc != 2*binomial(n-1, degree):
        chains_new = -1
    return(chains_new)

#------------------------------------------------------

def debruijn_based_on_partial(n):
    '''
    generate a characteristic function of de Bruijn sequences based on partial cycle structure
    '''
    f = x[0]+ x[n]
    chains = {}
    attempts = [] # stores the number of tries for each degree 0<= d <= n-2
    for d in range(0, n-1):
        attempts.append(0)
        while True:
            attempts[-1] = attempts[-1] + 1
            f_temp = f + random_homogeneous_function(n, d)
            chains_new = update_partial_cycle_structure(n, f_temp, d, chains)
            if chains_new != -1:
                f = f_temp
                chains = chains_new
                break
    f = f + prod([x[i] for i in range(1,n)])
    print('attempts = {0}'.format(attempts))
    return(f)

def debruijn_based_on_random(n):
    '''
    generate a characteristic function of de Bruijn sequences based on random search
    '''
    f = x[0] + x[n]
    num_try = 0
    while True:
        num_try = num_try + 1
        f_temp = f + random_function(n)
        initial_state = random_state(n)
        if cycle_length(n, f_temp, initial_state) == 2^n:
            f = f_temp
            print('num_try = %d' %(num_try))
            break
    return(f)

def sparse_debruijn_based_on_partial(n, num_term, bound_attempt):
    '''
    based on partial cycle structure, generate a characteristic function of de Bruijn sequences
    whose number of terms of degree d is less than or equal to a given bound for each 0 <= d <= n-1
    bound_attempt indicates the number of times one candidate is tested before being eliminated
    '''
    num_try = 0
    found = 0
    while found == 0:
        num_try = num_try + 1
        f = x[0] + x[n]
        chains = {}
        attempts = []
        for d in range(n-1):
            degree_found = 0
            null_test = 0
            attempts.append(0)
            for i in range(bound_attempt):
                attempts[-1] = attempts[-1] + 1
                if null_test == 0:
                    less_term = random.randint(0, num_term)
                    f_temp = f + random_sparse_homogeneous_function(n, d, less_term)
                    if less_term == 0:
                        null_test = 1
                else:
                    less_term = random.randint(1, num_term)
                    f_temp = f + random_sparse_homogeneous_function(n, d, less_term)
                chains_new = update_partial_cycle_structure(n, f_temp, d, chains)
                if chains_new != -1:
                    f = f_temp
                    chains = chains_new
                    degree_found = 1
                    break
            if degree_found == 0:
                break
        if d == n-2 and degree_found == 1:
            break
    f = f + prod([x[i] for i in range(1,n)])
    print('num_try = %d' %(num_try))
    print('attempts = {0}'.format(attempts))
    return(f)

def sparse_debruijn_based_on_random(n, num_term):
    '''
    based on random search, generate a characteristic function of de Bruijn sequences
    whose number of terms of degree d is less than or equal to a given bound for each 0 <= d <= n-1
    '''
    num_try = 0
    while True:
        num_try = num_try + 1
        f = x[0] + x[n]
        for d in range(0, n-1):
            less_term = random.randint(0, num_term)
            f = f + random_sparse_homogeneous_function(n, d, less_term)
        f = f + prod([x[i] for i in range(1,n)])
        initial_state = random_state(n)
        if cycle_length(n, f, initial_state) == 2^n:
            print('num_try = %d' %(num_try))
            break
    return(f)

def modified_debruijn_based_on_partial(n):
    '''
    generate a characteristic function of modified de Bruijn sequences based on partial cycle structure
    '''
    f = x[0]+ x[n]
    chains = {}
    initial_state = (GF(2)(1),) + tuple([GF(2)(0) for i in range(n-1)])
    last_state = tuple([GF(2)(0) for i in range(n-1)]) + (GF(2)(1),)
    chains[initial_state] = last_state
    attempts = []
    for degree in range(1, n-1):
        attempts.append(0)
        while True:
            attempts[-1] = attempts[-1] + 1
            f_temp = f + random_homogeneous_function(n, degree)
            chains_new = update_partial_cycle_structure(n, f_temp, degree, chains)
            if chains_new != -1:
                f = f_temp
                chains = chains_new
                break
    print('attempts = {0}'.format(attempts))
    return(f)

def modified_debruijn_based_on_random(n):
    '''
    generate a characteristic function of modified de Bruijn sequences based on random search
    '''
    num_try = 0
    while True:
        num_try = num_try + 1
        f = x[0] + x[n]
        for d in range(1, n-1):
            f = f + random_homogeneous_function(n, d)
        initial_state = random_nonzero_state(n)
        if cycle_length(n, f, initial_state) == 2^n-1:
            break
    print('num_try = %d' %(num_try))
    return(f)


########## below is the main function ##########

import itertools, random, time # import three modules

for n in range(7, 19):
    boolean_function = BooleanPolynomialRing(n+1, 'x', order='deglex')
    x = [boolean_function.gen(i) for i in range(n+1)]
    print('n = %d' %n)
    time_start = time.time()
    f = debruijn_based_on_partial(n)
#   f = debruijn_based_on_random(n)
#   f = sparse_debruijn_based_on_partial(n, num_term=10, bound_attempt=10)
#   f = sparse_debruijn_based_on_random(n, num_term=10)
#   f = modified_debruijn_based_on_partial(n)
#   f = modified_debruijn_based_on_random(n)
#   print(f)
#   print(cycle_length(n, f, random_nonzero_state(n)) == 2^n)
#   print(cycle_length(n, f, random_nonzero_state(n)) == 2^n-1)
    time_end = time.time()
    print('the running time is : %f seconds' %(time_end-time_start))
    print('-------------------------------')